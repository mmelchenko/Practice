package jdbc;

import java.sql.*;
import java.util.Properties;

/**
 * Class for simple JDBC example
 */
public class JDBC {

    private String jdbcDriver;
    private String database;
    private Properties properties;
    private Connection connection;
    private PreparedStatement preparedStatement;
    private ResultSet resultSet;

    public JDBC(String jdbcDriver, String database) {
        this.jdbcDriver = jdbcDriver;
        this.loadDriver();
        this.database = database;
    }

    public JDBC(String jdbcDriver, String database, String user, String password) {
        this.jdbcDriver = jdbcDriver;
        this.loadDriver();
    }

    public JDBC(String jdbcDriver, String host, String port, String database, String user, String password) {
        this.jdbcDriver = jdbcDriver;
        this.loadDriver();
    }

    public void addBook(String bookName, String releaseYear, String author) {
        String query = "INSERT INTO LIBRARY (BOOK_NAME, RELEASE_YEAR, AUTHOR)  VALUES (?, ?, ?)";
        try {
            connection.setAutoCommit(false);
            preparedStatement = connection.prepareStatement(query);
            preparedStatement.setString(1, bookName);
            preparedStatement.setString(2, releaseYear);
            preparedStatement.setString(3, author);
            preparedStatement.executeUpdate();
            connection.commit();
            System.out.println("A book " + bookName + " was added.");
        } catch (SQLException e) {
            System.out.println("Failed to add a book named " + bookName + ".");
            e.printStackTrace();
        }
    }

    public void updateBook(String bookName, String updatedYear, String updatedAuthor) {
        String query = "UPDATE LIBRARY SET RELEASE_YEAR = ?, AUTHOR = ? WHERE BOOK_NAME = ?";
        try {
            connection.setAutoCommit(false);
            preparedStatement = connection.prepareStatement(query);
            preparedStatement.setString(1, updatedYear);
            preparedStatement.setString(2, updatedAuthor);
            preparedStatement.setString(3, bookName);
            preparedStatement.executeUpdate();
            connection.commit();
            System.out.println("A book " + bookName + " was updated.");
        } catch (SQLException e) {
            System.out.println("Failed to update a book named " + bookName + ".");
            e.printStackTrace();
        }
    }

    public void deleteBook(String bookName) {
        String query = "DELETE FROM LIBRARY WHERE BOOK_NAME = ?";
        try {
            connection.setAutoCommit(false);
            preparedStatement = connection.prepareStatement(query);
            preparedStatement.setString(1, bookName);
            preparedStatement.executeUpdate();
            connection.commit();
            System.out.println("A book " + bookName + " was deleted.");
        } catch (SQLException e) {
            System.out.println("Failed to delete a book named " + bookName + ".");
            e.printStackTrace();
        }
    }

    public void printAllBooks() {
        String query = "SELECT * FROM LIBRARY";
        try {
            preparedStatement = connection.prepareStatement(query);
            resultSet = preparedStatement.executeQuery();
            int count = 1;
            while (resultSet.next()) {
                String bookName = resultSet.getString("BOOK_NAME");
                String releaseYear = resultSet.getString("RELEASE_YEAR");
                String author = resultSet.getString("AUTHOR");
                System.out.println(count + ". " + bookName + " / " + releaseYear + " / " + author);
                count++;
            }
        } catch (SQLException e) {
            System.out.println("Failed to print all books.");
            e.printStackTrace();
        } finally {
            this.close();
        }
    }

    public void createDB() {
        String query = "CREATE TABLE LIBRARY (" +
                        "ID INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY (" +
                        "START WITH 1, INCREMENT BY 1), " +
                        "BOOK_NAME CHAR(50) NOT NULL, " +
                        "RELEASE_YEAR VARCHAR(20) NOT NULL, " +
                        "AUTHOR CHAR(50) NOT NULL)";
        try {
            preparedStatement = connection.prepareStatement(query);
            preparedStatement.execute();
            System.out.println("Database was created successfully.");

        } catch (SQLException e) {
            System.out.println("SQLException!");
            System.out.println("Unable to create prepared statement.");
            e.printStackTrace();
        }
    }

    public void createConnectionForDerbyDB() {
        try {
            connection = DriverManager.getConnection(database + ";create = true");
            System.out.println("Connection to the database was created successfully.");
        } catch (SQLException e) {
            System.out.println("SQLException!");
            System.out.println("Unable to create connection to database.");
            e.printStackTrace();
        }
    }

    public void createConnection() {
        try {
            connection = DriverManager.getConnection(database, properties);
            System.out.println("Connection to the database was created successfully.");
        } catch (SQLException e) {
            System.out.println("SQLException!");
            System.out.println("Unable to create connection to database.");
            e.printStackTrace();
        }
    }

    private void loadPostgresProperties(String database, String user, String password) {
        properties = new Properties();
        properties.put("database", database);
        properties.put("user", user);
        properties.put("password", password);
        System.out.println("Properties were loaded.");
        System.out.println("Database: " + database);
        System.out.println("User: " + user);
        System.out.println("Password: " + password);
    }

    public void loadOracleProperties(String host, String port, String sid, String user, String password) {
        Properties props = new Properties();
        props.put("host", host);
        props.put("port", port);
        props.put("sid", sid);
        props.put("user", user);
        props.put("password", password);
        System.out.println("Properties were loaded.");
        System.out.println("Host: " + host);
        System.out.println("Port: " + port);
        System.out.println("Sid: " + sid);
        System.out.println("User: " + user);
        System.out.println("Password: " + password);
    }

    private void loadGeneralProperties(String host, String port, String database, String user, String password) {
        properties = new Properties();
        properties.put("host", host);
        properties.put("prt", port);
        properties.put("database", database);
        properties.put("user", user);
        properties.put("password", password);
        System.out.println("Properties were loaded.");
        System.out.println("Host: " + host);
        System.out.println("Port: " + port);
        System.out.println("Database: " + database);
        System.out.println("User: " + user);
        System.out.println("Password: " + password);
    }

    private void loadDriver() {
        try {
            Class.forName(jdbcDriver).newInstance();
            System.out.println("Driver was loaded.");
            System.out.println("JDBC full name is [" + jdbcDriver + "].");
        } catch (ClassNotFoundException e) {
            System.out.println("ClassNotFoundException!");
            System.out.println("Unable to load a driver.");
            e.printStackTrace();
        } catch (InstantiationException e) {
            System.out.println("InstantiationException!");
            System.out.println("Unable to load a driver.");
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            System.out.println("IllegalAccessException!");
            System.out.println("Unable to load a driver.");
            e.printStackTrace();
        }
    }

    private void close() {
        if(connection != null) {
            try {
                DriverManager.getConnection(database + ";create = false; shutdown = true");
            } catch (SQLException e) {
                System.out.println("myDB connection is closed.");
            }
        }
    }
}
